import java.util.Scanner;

public class BitonicArray {

	static int ascendingBinarySearch(int[] arr, int key, int range) {
		int low = 0, high = range, mid = 0;
		while (low <= high) {
			mid = (low + high) / 2;
			if (arr[mid] == key) {
				return mid;
			} else if (arr[mid] > key) {
				high = mid - 1;
			} else {
				low = mid + 1;
			}
		}
		return -1;
	}

	static int descendingBinarySearch(int[] arr, int key, int range) {
		int low = range, high = arr.length - 1, mid = 0;
		while (low <= high) {
			mid = (low + high) / 2;
			if (arr[mid] == key) {
				return mid;
			} else if (arr[mid] > key) {
				low = mid + 1;
			} else {
				high = mid - 1;
			}
		}
		return -1;
	}

	static int FindBitonic(int[] arr) {
		int l = 0, r = arr.length - 1, mid = 0;
		while (l <= r) {
			mid = (l + r) / 2;
			if (mid > 0 && mid < arr.length - 1) {
				if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {
					return mid;
				} else if (arr[mid] > arr[mid - 1]) {
					l = mid + 1;
				} else {
					r = mid - 1;
				}
			} else if (mid == 0) {
				if (arr[0] > arr[1]) {
					return 0;
				} else {
					return 1;
				}
			} else if (mid == arr.length - 1) {
				if (arr[arr.length - 1] > arr[arr.length - 2]) {
					return arr.length - 1;
				} else {
					return arr.length - 2;
				}
			}
		}
		return -1;
	}

	static int SearchBitonic(int[] arr, int key, int bIndex) {
		if (key == arr[bIndex]) {
			return bIndex;
		}
		if (key > arr[bIndex]) {
			return -1;
		}
		int res1 = ascendingBinarySearch(arr, key, bIndex - 1);
		if (res1 != -1) {
			return res1;
		}
		int res2 = descendingBinarySearch(arr, key, bIndex + 1);
		if (res2 != -1) {
			return res2;
		}
		return -1;
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int[] arr = { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 3, 2, 1, 0 };
		int key = sc.nextInt();
		int bIndex = FindBitonic(arr);
		System.out.println(SearchBitonic(arr, key, bIndex));
	}
}
